bindParamsFromEnv: true

parameters:
- name: repo
  type: string
  default: ""

- name: branch
  type: string
  default: ""

- name: GIT_SSH_COMMAND
  default: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

tasks:
  branch:
    script: |
      if [ -z ${CI_COMMIT_REF_NAME+x} ]; then
        git symbolic-ref -q --short HEAD || git describe --tags --exact-match
      else
        echo ${CI_COMMIT_REF_NAME}
      fi

  repo:
    script: git config --get remote.origin.url

  config:
    tasks:
      identity:
        parameters:
        - name: name
          default: "Toolbox"
        - name: email
          default: "toolbox@toolbox.com"
        - name: args
          default: ""
        - name: dir
          default: "."
        steps:
        - task: core.exec
          arguments:
            title: "Git :: config"
            cmd: |
              cd {{.dir}}
              git config --list | grep user\.name  || git config {{.args}} user.name "{{.name}}"
              git config --list | grep user\.email || git config {{.args}} user.email "{{.email}}"

  init:
    steps:
    - task: core.exec
      arguments:
        title: "Git :: init"
        cmd: |
          git init .
          git remote rm origin || true
          git remote add -t {{.branch}} -f origin  {{.repo}}
  pull:
    steps:
    - task: core.exec
      arguments:
        title: "Git :: pull"
        cmd: |
          git checkout {{.branch}}
          git reset --hard origin/{{.branch}}
          git pull origin {{.branch}}

  current_repo:
    script: git config --get remote.origin.url

  backmerge:
    parameters:
    - name: source
      type: string
    - name: target
      type: string
    - name: working_dir
      default: ".variant/tools_git_backmerge"
    - name: project_dir
      default: "source"
    steps:
    - if:
      - task: utils.git.backmerge.rebase
      then:
      - script: echo "Back-merged by the 'rebase' strategy"
      else:
      - task: utils.git.backmerge.merge
    tasks:
      rebase:
        steps:
        - task: utils.git.config.identity
        - task: core.exec
          arguments:
            title: "Git :: backmerge :: {{.source}} -> {{.target}}"
            cmd: |
              rm -fR {{ .working_dir }}/{{ .project_dir }}
              mkdir -p {{ .working_dir }}/{{ .project_dir }}
              (
              cd {{ .working_dir }}/{{ .project_dir }}
              git init .
              git remote add -f origin {{ .repo }}

              git fetch origin {{.target}}
              git checkout {{.target}}
              git pull origin {{.target}}

              git fetch origin {{.source}}
              git checkout {{.source}}
              git pull origin {{.source}}

              git rebase {{.target}}
              git checkout {{.target}}
              git merge --ff-only {{.source}}

              git push origin {{.target}}
              )
              rm -fR {{ .working_dir }}/{{ .project_dir }}
      merge:
        steps:
        - task: utils.git.config.identity
        - task: core.exec
          arguments:
            title: "Git :: backmerge :: {{.source}} -> {{.target}}"
            cmd: |
              rm -fR {{ .working_dir }}/{{ .project_dir }}
              mkdir -p {{ .working_dir }}/{{ .project_dir }}
              (
              cd {{ .working_dir }}/{{ .project_dir }}
              git init .
              git remote add -f origin {{ .repo }}

              git fetch origin {{.source}}
              git checkout {{.source}}
              git pull origin {{.source}}

              git fetch origin {{.target}}
              git checkout {{.target}}
              git pull origin {{.target}}

              git merge --ff {{.source}}

              git push origin {{.target}}
              )
              rm -fR {{ .working_dir }}/{{ .project_dir }}

  sync:
    autoenv: true
    parameters:
    - name: utils.git.current_repo
      default: ""
    - name: source_branch
      default: "master"
    - name: target_repo
      default: ""
    - name: target_branch
      default: "master"
    - name: working_dir
      default: ".variant/tools_git_sync"
    - name: project_dir
      default: "source"
    steps:
    - task: core.exec
      arguments:
        title: "Git :: sync :: to external repo"
        cmd: |
          rm -fR {{ .working_dir }}
          mkdir -p {{ .working_dir }}
          (
          cd {{ .working_dir }}
          git clone {{ .tools.git.current_repo }} {{ .project_dir }}
          cd {{ .project_dir }}
          git remote add target {{ .target_repo }}
          git checkout {{ .source_branch }}
          git pull origin {{ .source_branch }}
          git push -f target {{.target_branch }}
          )
          rm -fR {{ .working_dir }}


